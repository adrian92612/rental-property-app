// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id              String    @id
  firstName       String
  lastName        String
  password        String?
  email           String    @unique
  phoneNumber     String?
  emailVerified   DateTime?
  image           String?
  imagePublicId   String?
  notifyEmail     Boolean   @default(false)
  notifySms       Boolean   @default(false)
  notifyPush      Boolean   @default(false)
  notifyUpdates   Boolean   @default(false)
  notifyReminders Boolean   @default(false)
  notifyOffers    Boolean   @default(false)
  notifyAlerts    Boolean   @default(false)
  notifyEvents    Boolean   @default(false)
  notifyReports   Boolean   @default(false)
  paymentMethod   String    @default("card")
  subscription    String    @default("monthly")
  billingAddress  String?

  accounts Account[]
  sessions Session[]
  property Property[]
  tenants  Tenant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Property {
  id              String   @id
  name            String
  address         String
  image           String?
  imagePublicId   String?
  owner           String
  contactInfo     String
  purchasePrice   Float    @default(0)
  monthlyExpense  Float    @default(0)
  mortgagePayment Float    @default(0)
  notes           String[]
  units           Unit[] // Relation to units

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Unit {
  id         String   @id
  number     String
  rentAmount Float    @default(0)
  dueDate    Int?
  notes      String[]
  propertyId String

  property Property @relation(fields: [propertyId], references: [id])
  tenant   Tenant?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tenant {
  id            String   @id
  firstName     String
  lastName      String
  email         String   @unique
  phoneNumber   String
  termInMonths  Int      @default(1)
  leaseStart    DateTime
  leaseEnd      DateTime
  image         String?
  imagePublicId String?
  notes         String[]

  unit   Unit?   @relation(fields: [unitId], references: [id])
  unitId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
